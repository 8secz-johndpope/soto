//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/main/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import AWSSDKSwiftCore

// MARK: Paginators

extension CodeBuild {

    ///  Retrieves one or more code coverage reports.
    public func describeCodeCoveragesPaginator(
        _ input: DescribeCodeCoveragesInput,
        onPage: @escaping (DescribeCodeCoveragesOutput, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(
            input: input,
            command: describeCodeCoverages,
            tokenKey: \DescribeCodeCoveragesOutput.nextToken,
            context: self.context,
            onPage: onPage
        )
    }

    ///   Returns a list of details about test cases for a report. 
    public func describeTestCasesPaginator(
        _ input: DescribeTestCasesInput,
        onPage: @escaping (DescribeTestCasesOutput, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(
            input: input,
            command: describeTestCases,
            tokenKey: \DescribeTestCasesOutput.nextToken,
            context: self.context,
            onPage: onPage
        )
    }

    ///  Retrieves the identifiers of your build batches in the current region.
    public func listBuildBatchesPaginator(
        _ input: ListBuildBatchesInput,
        onPage: @escaping (ListBuildBatchesOutput, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(
            input: input,
            command: listBuildBatches,
            tokenKey: \ListBuildBatchesOutput.nextToken,
            context: self.context,
            onPage: onPage
        )
    }

    ///  Retrieves the identifiers of the build batches for a specific project.
    public func listBuildBatchesForProjectPaginator(
        _ input: ListBuildBatchesForProjectInput,
        onPage: @escaping (ListBuildBatchesForProjectOutput, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(
            input: input,
            command: listBuildBatchesForProject,
            tokenKey: \ListBuildBatchesForProjectOutput.nextToken,
            context: self.context,
            onPage: onPage
        )
    }

    ///  Gets a list of build IDs, with each build ID representing a single build.
    public func listBuildsPaginator(
        _ input: ListBuildsInput,
        onPage: @escaping (ListBuildsOutput, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(
            input: input,
            command: listBuilds,
            tokenKey: \ListBuildsOutput.nextToken,
            context: self.context,
            onPage: onPage
        )
    }

    ///  Gets a list of build IDs for the specified build project, with each build ID representing a single build.
    public func listBuildsForProjectPaginator(
        _ input: ListBuildsForProjectInput,
        onPage: @escaping (ListBuildsForProjectOutput, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(
            input: input,
            command: listBuildsForProject,
            tokenKey: \ListBuildsForProjectOutput.nextToken,
            context: self.context,
            onPage: onPage
        )
    }

    ///  Gets a list of build project names, with each build project name representing a single build project.
    public func listProjectsPaginator(
        _ input: ListProjectsInput,
        onPage: @escaping (ListProjectsOutput, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(
            input: input,
            command: listProjects,
            tokenKey: \ListProjectsOutput.nextToken,
            context: self.context,
            onPage: onPage
        )
    }

    ///   Gets a list ARNs for the report groups in the current AWS account. 
    public func listReportGroupsPaginator(
        _ input: ListReportGroupsInput,
        onPage: @escaping (ListReportGroupsOutput, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(
            input: input,
            command: listReportGroups,
            tokenKey: \ListReportGroupsOutput.nextToken,
            context: self.context,
            onPage: onPage
        )
    }

    ///   Returns a list of ARNs for the reports in the current AWS account. 
    public func listReportsPaginator(
        _ input: ListReportsInput,
        onPage: @escaping (ListReportsOutput, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(
            input: input,
            command: listReports,
            tokenKey: \ListReportsOutput.nextToken,
            context: self.context,
            onPage: onPage
        )
    }

    ///   Returns a list of ARNs for the reports that belong to a ReportGroup. 
    public func listReportsForReportGroupPaginator(
        _ input: ListReportsForReportGroupInput,
        onPage: @escaping (ListReportsForReportGroupOutput, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(
            input: input,
            command: listReportsForReportGroup,
            tokenKey: \ListReportsForReportGroupOutput.nextToken,
            context: self.context,
            onPage: onPage
        )
    }

    ///   Gets a list of projects that are shared with other AWS accounts or users. 
    public func listSharedProjectsPaginator(
        _ input: ListSharedProjectsInput,
        onPage: @escaping (ListSharedProjectsOutput, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(
            input: input,
            command: listSharedProjects,
            tokenKey: \ListSharedProjectsOutput.nextToken,
            context: self.context,
            onPage: onPage
        )
    }

    ///   Gets a list of report groups that are shared with other AWS accounts or users. 
    public func listSharedReportGroupsPaginator(
        _ input: ListSharedReportGroupsInput,
        onPage: @escaping (ListSharedReportGroupsOutput, EventLoop) -> EventLoopFuture<Bool>
    ) -> EventLoopFuture<Void> {
        return client.paginate(
            input: input,
            command: listSharedReportGroups,
            tokenKey: \ListSharedReportGroupsOutput.nextToken,
            context: self.context,
            onPage: onPage
        )
    }

}

extension CodeBuild.DescribeCodeCoveragesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.DescribeCodeCoveragesInput {
        return .init(
            maxLineCoveragePercentage: self.maxLineCoveragePercentage,
            maxResults: self.maxResults,
            minLineCoveragePercentage: self.minLineCoveragePercentage,
            nextToken: token,
            reportArn: self.reportArn,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )

    }
}

extension CodeBuild.DescribeTestCasesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.DescribeTestCasesInput {
        return .init(
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token,
            reportArn: self.reportArn
        )

    }
}

extension CodeBuild.ListBuildBatchesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListBuildBatchesInput {
        return .init(
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token,
            sortOrder: self.sortOrder
        )

    }
}

extension CodeBuild.ListBuildBatchesForProjectInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListBuildBatchesForProjectInput {
        return .init(
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token,
            projectName: self.projectName,
            sortOrder: self.sortOrder
        )

    }
}

extension CodeBuild.ListBuildsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListBuildsInput {
        return .init(
            nextToken: token,
            sortOrder: self.sortOrder
        )

    }
}

extension CodeBuild.ListBuildsForProjectInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListBuildsForProjectInput {
        return .init(
            nextToken: token,
            projectName: self.projectName,
            sortOrder: self.sortOrder
        )

    }
}

extension CodeBuild.ListProjectsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListProjectsInput {
        return .init(
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )

    }
}

extension CodeBuild.ListReportGroupsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListReportGroupsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )

    }
}

extension CodeBuild.ListReportsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListReportsInput {
        return .init(
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token,
            sortOrder: self.sortOrder
        )

    }
}

extension CodeBuild.ListReportsForReportGroupInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListReportsForReportGroupInput {
        return .init(
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token,
            reportGroupArn: self.reportGroupArn,
            sortOrder: self.sortOrder
        )

    }
}

extension CodeBuild.ListSharedProjectsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListSharedProjectsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )

    }
}

extension CodeBuild.ListSharedReportGroupsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListSharedReportGroupsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )

    }
}

